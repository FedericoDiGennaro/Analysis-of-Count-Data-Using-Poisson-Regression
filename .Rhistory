+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
#with the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
# load data ---------------------------------------------------------------
rm(list = ls())
# load packages -----------------------------------------------------------
library(ggplot2)
library(tidyverse)
library(GGally)
library(readxl)
library(MASS) # for BOXCOX
library(car) # for VIF
library(performance) # for nicer multicollinearity plot
library(jtools)
library(sandwich)
library(goodness-of-fit)
library(pscl)
# load data ---------------------------------------------------------------
rm(list = ls())
data <- read_excel("data/data.xlsx")
glimpse(data)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# define dependent
y <- data[3]
# check presence of missing values
print(c('is there any missing value? ', any(is.na(data))))
# univariate numerical analysis for numeric variables
summary(X)
var(X[-4])
ggpairs(X)
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
ggpairs(X[],
aes(color = X$Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 10),
axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10) )
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
ggpairs(X[],
aes(color = X$Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8) )
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
ggpairs(X[],
aes(color = X$Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))+
labs(color = "Custom Legend Label")
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
# Create the ggpairs plot
plot <- ggpairs(X, aes(color = Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Customize the legend labels
plot <- plot +
scale_color_manual(values = c("Up" = "blue", "Down" = "red"),
labels = c("Direction"))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
# Create the ggpairs plot
plot <- ggpairs(X, aes(color = X$Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Customize the legend labels
plot <- plot +
scale_color_manual(values = c("Up" = "blue", "Down" = "red"),
labels = c("Direction"))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
# Create the ggpairs plot
plot <- ggpairs(X, aes(color = Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Customize the legend labels and colors
plot <- plot +
scale_color_manual(values = c("Up" = "blue", "Down" = "red", "Sideways" = "green"),
labels = c("Direction"))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
# Create the ggpairs plot
plot <- ggpairs(X, aes(color = Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# Create the ggpairs plot with histogram
plot <- ggpairs(data, lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Create the ggpairs plot with histogram
plot <- ggpairs(data[3,6], lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Add histograms based on the color of Direction
plot <- plot +
geom_histogram(aes(x = X, fill = Direction), alpha = 0.5, position = "identity")
# Display the plot
print(plot)
# Add histograms based on the color of Direction
plot <- plot +
geom_bar(aes(x = X, fill = Direction), alpha = 0.5, position = "identity")
# Display the plot
print(plot)
# Create the ggpairs plot with histogram
hist(y$Apprentices, breaks=seq(0,250,10))
hist(data, breaks=seq(0,250,10), col = "blue", main = "Histogram", xlab = "Value", ylab = "Frequency")
hist(y$Apprentices, breaks=seq(0,250,10), col = "blue", main = "Histogram", xlab = "Value", ylab = "Frequency")
# Setup options for R Markdown
library(ggplot2)
library(tidyverse)
library(GGally)
library(readxl)
library(MASS) # for BOXCOX
library(car) # for VIF
library(performance) # for nicer multicollinearity plot
library(xtable)
data <- read_excel("data/data.xlsx")
knitr::opts_chunk$set(
echo       = FALSE,    # Do not print code
warning    = FALSE,    # Suppress warnings
message    = FALSE,    # Suppress messages
fig.align  = "center", # Center figures
fig.width  = 2.7,      # Good standard figure width for single-panel figures
fig.height = 2.4,       # Good standard figure height for single-panel figures
fig.pos = "ht",
out.extra = ""
)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Direction)
plot <- ggpairs(X, aes(color = Direction, alpha = .5),
lower = list(continuous = 'smooth'),
upper = list(continuous = wrap("cor",size = 12)),
legend = 1, textsize=25) +
theme(legend.position = "bottom", text = element_text(size = 25),
axis.text.x = element_text(size = 20), axis.text.y = element_text(size = 20))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# define dependent
y <- data[3]
hist(y$Apprentices, breaks=seq(0,250,10), main="Histogram of the outcome variable", xlab = "Number of Apprentices", ylab = "Frequency")
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = poisson(link = "log"))
summary(poisson.model)
d <- summary(poisson.model)$coefficients
View(d)
formatted_d <- format(d, digits = c(2, 2, 2, 2, 2), scientific = c(FALSE, FALSE, FALSE, FALSE, TRUE))
# Format the coefficient table
formatted_d <- d
formatted_d[, 5] <- formatC(formatted_d[, 5], digits = 2, format = "fg")
formatted_d[, 4] <- formatC(formatted_d[, 4], digits = 2, format = "fg")
# Create the kable table
kable(formatted_d)
# Create the kable table
knitr::kable(formatted_d)
# load data ---------------------------------------------------------------
rm(list = ls())
data <- read_excel("data/data.xlsx")
glimpse(data)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# define dependent
y <- data[3]
# check presence of missing values
print(c('is there any missing value? ', any(is.na(data))))
# univariate numerical analysis for numeric variables
summary(X)
var(X[-4])
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = poisson(link = "log"))
summary(poisson.model)
qpoisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = quasipoisson())
summary(qpoisson.model)
# MODEL 2: removing the outlier ---------------------------------------------------------------------
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# define dependent
y <- data[3]
hist(y$Apprentices, breaks=seq(0,250,10))
mean(y$Apprentices)
var(y$Apprentices)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = poisson(link = "log"),
control = glm.control(maxit = 1000))
summary(poisson.model)
qpoisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = quasipoisson(),
control = glm.control(maxit = 1000))
summary(qpoisson.model)
# MODEL 3: log of population and distance ---------------------------------------------------------------------
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction, data , family = poisson(link = "log"),
control = glm.control(maxit = 1000))
summary(poisson.model)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction, data , family = quasipoisson(),
control = glm.control(maxit = 1000))
summary(poisson.model)
# MODEL 4: interactions ---------------------------------------------------------------------
ggpairs(X)
#without the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
#with the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
with(poisson.model3, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
install.packages("AER")
# load packages -----------------------------------------------------------
library(ggplot2)
library(tidyverse)
library(GGally)
library(readxl)
library(MASS) # for BOXCOX
library(car) # for VIF
library(performance) # for nicer multicollinearity plot
library(jtools)
library(sandwich)
library(goodness-of-fit)
# load data ---------------------------------------------------------------
rm(list = ls())
data <- read_excel("data/data.xlsx")
glimpse(data)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# define dependent
y <- data[3]
# check presence of missing values
print(c('is there any missing value? ', any(is.na(data))))
# univariate numerical analysis for numeric variables
summary(X)
var(X[-4])
ggpairs(X)
# in order to check the differences in distribution due to difference in the
# union_shop variable, use this: (DISAGGREGATE DATA wrt Union_shop)
# Create the ggpairs plot
plot <- ggpairs(X, aes(color = Direction, alpha = .5),
lower = list(continuous = 'smooth'), legend = 1) +
theme(legend.position = "bottom", text = element_text(size = 12),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
# Remove alpha from the legend
plot <- plot +
scale_alpha_identity(guide = "none")
# Display the plot
print(plot)
# Create the ggpairs plot with histogram
hist(y$Apprentices, breaks=seq(0,250,10))
hist(y$Apprentices, breaks=seq(0,250,10), xlab = "Number of Apprentices", ylab = "Frequency")
mean(y$Apprentices)
var(y$Apprentices)
par(mfrow=c(1,1))
boxplot(X[-4], las = 2, col = c("red", "steelblue", "yellow"), ylab ="(%)")
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = poisson(link = "log"))
summary(poisson.model)
qpoisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = quasipoisson())
dispersiontest(poisson.model)
dispersion_test(poisson.model)
# MODEL 2: removing the outlier ---------------------------------------------------------------------
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
# define regressors
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
# define dependent
y <- data[3]
hist(y$Apprentices, breaks=seq(0,250,10))
mean(y$Apprentices)
var(y$Apprentices)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = poisson(link = "log"),
control = glm.control(maxit = 1000))
summary(poisson.model)
dispersiontest(poisson.model)
qpoisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = quasipoisson(),
control = glm.control(maxit = 1000))
summary(qpoisson.model)
with(poisson.model, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
poisson.model2<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction , data, family = quasipoisson(),
control = glm.control(maxit = 1000))
summary(poisson.model2)
# MODEL 3: log of population and distance ---------------------------------------------------------------------
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction, data , family = poisson(link = "log"),
control = glm.control(maxit = 1000))
summary(poisson.model)
dispersiontest(poisson.model)
poisson.model<-glm(Apprentices ~ Distance + Population + Degree_Urb
+ Direction, data , family = quasipoisson(),
control = glm.control(maxit = 1000))
summary(poisson.model)
# MODEL 4: interactions ---------------------------------------------------------------------
ggpairs(X)
#without the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
dispersiontest(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
#with the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
dispersiontest(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
nb.model<-glm.nb(Apprentices ~ (LogDistance + LogPopulation + Degree_Urb
+ Direction)^2 , data)
#with the log
rm(list = ls())
data <- read_excel("data/data2.xlsx")
glimpse(data)
data$Direction <- as.factor(data$Direction)
X <- data[-c(1,3)]
y <- data[3]
data$Distance = log(data$Distance)
data$Population = log(data$Population)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = poisson(link="log"))
summary(poisson.model3)
dispersiontest(poisson.model3)
poisson.model3<-glm(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data, family = quasipoisson())
summary(poisson.model3)
with(poisson.model3, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
nb.model<-glm.nb(Apprentices ~ (LogDistance + LogPopulation + Degree_Urb
+ Direction)^2 , data)
nb.model<-glm.nb(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data)
summary(nb.model)
nb.model<-glm.nb(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction) , data)
summary(nb.model)
nb.model<-glm.nb(Apprentices ~ (Distance + Population + Degree_Urb
+ Direction)^2 , data)
summary(nb.model)
# Setup options for R Markdown
library(ggplot2)
library(tidyverse)
library(GGally)
library(readxl)
library(MASS) # for BOXCOX
library(car) # for VIF
library(performance) # for nicer multicollinearity plot
library(xtable)
data <- read_excel("data/data.xlsx")
knitr::opts_chunk$set(
echo       = FALSE,    # Do not print code
warning    = FALSE,    # Suppress warnings
message    = FALSE,    # Suppress messages
fig.align  = "center", # Center figures
fig.width  = 2.7,      # Good standard figure width for single-panel figures
fig.height = 2.4,       # Good standard figure height for single-panel figures
fig.pos = "ht",
out.extra = ""
)
# Generate some example data
set.seed(0)
y <- data[3]
# Plot histogram of observed y and Poisson distribution
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot histogram of observed y
hist(observed_y, breaks = 10, col = "skyblue", border = "black", main = "Histogram of Observed y",
xlab = "Value", ylab = "Frequency")
# Generate some example data
set.seed(0)
y <- data[3]
# Plot histogram of observed y and Poisson distribution
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot histogram of observed y
hist(y, breaks = 10, col = "skyblue", border = "black", main = "Histogram of Observed y",
xlab = "Value", ylab = "Frequency")
# Generate some example data
set.seed(0)
y <- data[3]
# Plot histogram of observed y and Poisson distribution
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot histogram of observed y
hist(y$Apprentices, breaks = 10, col = "skyblue", border = "black", main = "Histogram of Observed y",
xlab = "Value", ylab = "Frequency")
# Plot histogram of Poisson distribution
lambda <- mean(y$Apprentices)
x <- 0:max(y$Apprentices)
poisson_probs <- dpois(x, lambda)
barplot(poisson_probs, names.arg = x, col = "lightgreen", border = "black",
main = "Histogram of Poisson Distribution", xlab = "Value", ylab = "Probability")
# define dependent
#hist(y$Apprentices, breaks=seq(0,250,10), main="Histogram of the outcome variable", #xlab = "Number of Apprentices", ylab = "Frequency")
# Generate some example data
set.seed(0)
y <- data[3]
# Plot histogram of observed y and Poisson distribution
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot histogram of observed y
hist(y$Apprentices, breaks=seq(0,250,10), col = "skyblue", border = "black", main = "Histogram of Observed y",
xlab = "Value", ylab = "Frequency")
# Plot histogram of Poisson distribution
lambda <- mean(y$Apprentices)
x <- 0:max(y$Apprentices)
poisson_probs <- dpois(x, lambda)
barplot(poisson_probs, names.arg = x, col = "lightgreen", border = "black",
main = "Histogram of Poisson Distribution", xlab = "Value", ylab = "Probability")
# define dependent
#hist(y$Apprentices, breaks=seq(0,250,10), main="Histogram of the outcome variable", #xlab = "Number of Apprentices", ylab = "Frequency")
